.advanced-news-ticker-inner .swiper {
  margin-right: auto;
  margin-left: auto;
  position: relative;
  overflow: hidden;
  list-style: none;
  padding: 0;
  /* Fix of Webkit flickering */
  z-index: 1;
}
.advanced-news-ticker-inner .swiper-vertical > .swiper-wrapper {
  flex-direction: column;
}
.advanced-news-ticker-inner .swiper-wrapper {
  position: relative;
  width: 100%;
  height: 100%;
  z-index: 1;
  display: flex;
  transition-property: transform;
  box-sizing: content-box;
}
.advanced-news-ticker-inner .swiper-android .swiper-slide,
.advanced-news-ticker-inner .swiper-wrapper {
  transform: translate3d(0px, 0, 0);
}
.advanced-news-ticker-inner .swiper-pointer-events {
  touch-action: pan-y;
}
.advanced-news-ticker-inner .swiper-pointer-events.swiper-vertical {
  touch-action: pan-x;
}
.advanced-news-ticker-inner .swiper-slide {
  flex-shrink: 0;
  width: 100%;
  height: 100%;
  position: relative;
  transition-property: transform;
}
.advanced-news-ticker-inner .swiper-fade.swiper-free-mode .swiper-slide {
  transition-timing-function: ease-out;
}
.advanced-news-ticker-inner .swiper-fade .swiper-slide {
  pointer-events: none;
  transition-property: opacity;
}
.advanced-news-ticker-inner .swiper-fade .swiper-slide .swiper-slide {
  pointer-events: none;
}
.advanced-news-ticker-inner .swiper-fade .swiper-slide-active,
.advanced-news-ticker-inner .swiper-fade .swiper-slide-active .swiper-slide-active {
  pointer-events: auto;
}

.ticker-style-1-2 .advanced-news-ticker-inner,
.ticker-style-1 .advanced-news-ticker-inner {
  border-radius: 0;
  background: none;
}
.ticker-style-1-2 .advanced-news-ticker-inner .ticker-title,
.ticker-style-1 .advanced-news-ticker-inner .ticker-title {
  padding: 3px 15px 3px 15px;
  font-weight: 500;
}
.ticker-style-1-2 .advanced-news-ticker-inner .navigation .news-ticker-nav,
.ticker-style-1 .advanced-news-ticker-inner .navigation .news-ticker-nav {
  border-radius: 2px;
}

.ticker-style-2 .advanced-news-ticker-inner {
  height: 40px;
}
.ticker-style-2 .advanced-news-ticker-inner .navigation .news-ticker-nav {
  background: #96a6ad;
  color: white;
}

.ticker-style-3 .advanced-news-ticker-inner {
  height: 36px;
  background: none;
}
.ticker-style-3 .advanced-news-ticker-inner .ticker-title {
  padding-left: 30px;
  clip-path: polygon(0 0, calc(100% - 10px) 0, calc(100% - 10px) 30%, 100% 50%, calc(100% - 10px) 70%, calc(100% - 10px) 100%, 0 100%);
}

.ticker-style-4 .advanced-news-ticker-inner {
  height: 36px;
  border-radius: 30px;
}
.ticker-style-4 .advanced-news-ticker-inner .navigation .news-ticker-nav {
  background: #adb7bb;
  color: #ffffff;
  border-radius: 50%;
  height: 28px;
}

.ticker-style-5 .advanced-news-ticker-inner {
  background: #edecea;
  height: 36px;
}
.ticker-style-5 .advanced-news-ticker-inner,
.ticker-style-5 .advanced-news-ticker-inner .ticker-title {
  border-radius: 30px;
}
.ticker-style-5 .advanced-news-ticker-inner .navigation .news-ticker-nav {
  background: #bbb4ac;
  color: #ffffff;
  border-radius: 50%;
  height: 28px;
}
.ticker-style-5 .navigation .news-ticker-nav {
  border-radius: 50%;
}

.ticker-style-6 .advanced-news-ticker-inner {
  height: 43px;
  border-radius: 30px;
  padding: 5px;
  background: #f1efed;
}
.ticker-style-6 .advanced-news-ticker-inner .ticker-title {
  border-radius: 30px;
  padding-left: 30px;
  clip-path: polygon(0 0, calc(100% - 15px) 0, 100% 50%, calc(100% - 15px) 100%, 0 100%);
}
.ticker-style-6 .advanced-news-ticker-inner .navigation .news-ticker-nav {
  height: 28px;
  border-radius: 50%;
  background: none !important;
  width: 20px;
  font-size: 14px;
}
.ticker-style-6 .advanced-news-ticker-inner .navigation .news-ticker-nav:hover {
  color: var(--ant-primary-color, #FF0404);
}

.ticker-style-7 .advanced-news-ticker-inner {
  background: var(--ant-primary-color, #FF0404);
  color: #FFFFFF;
  border-radius: 6px;
  padding: 5px;
}
.ticker-style-7 .advanced-news-ticker-inner .post-icon svg,
.ticker-style-7 .advanced-news-ticker-inner .post-link {
  color: #FFFFFF;
}
.ticker-style-7 .advanced-news-ticker-inner .post-link:hover {
  opacity: 0.8;
  color: #FFFFFF;
}
.ticker-style-7 .advanced-news-ticker-inner .ticker-title {
  padding-left: 0;
  background: transparent;
}
.ticker-style-7 .advanced-news-ticker-inner .navigation .news-ticker-nav {
  color: #ffffff;
  background: rgba(0, 0, 0, 0.34);
}
.ticker-style-7 .advanced-news-ticker-inner .navigation .news-ticker-nav:hover {
  background: #FFF;
  color: var(--ant-primary-color, #FF0404);
}
.ticker-style-7 .advanced-news-ticker-inner .breaking-title {
  border-left: 1px solid rgba(255, 255, 255, 0.4);
  padding-left: 15px;
}

.ticker-style-8 .advanced-news-ticker-inner {
  background-color: #E80404;
  background-image: linear-gradient(-126deg, #020000 0%, #f2295b 100%);
  transform: skewX(16deg);
  border-radius: 10px;
  overflow: visible;
  margin-right: 10px;
  height: 40px;
}
.ticker-style-8 .advanced-news-ticker-inner .post-icon svg,
.ticker-style-8 .advanced-news-ticker-inner .post-link {
  color: #FFFFFF;
}
.ticker-style-8 .advanced-news-ticker-inner .ticker-title {
  margin-top: -11px;
  margin-right: 5px;
  border-radius: 6px;
}
.ticker-style-8 .advanced-news-ticker-inner .navigation .news-ticker-nav {
  background: rgba(255, 255, 255, 0.6784313725);
  color: #ae0909;
}
.ticker-style-8 .advanced-news-ticker-inner .navigation .news-ticker-nav:hover {
  background-color: #FFFFFF;
  color: var(--ant-primary-color, #FF0404);
}

.advanced-news-ticker-inner {
  position: relative;
  align-items: center;
  display: flex;
  gap: 15px;
  overflow: hidden;
  background: #EDF6F9;
}
.control-visible-yes .advanced-news-ticker-inner {
  padding-left: 120px;
}
@media (max-width: 579px) {
  .advanced-news-ticker-inner .swiper-button-prev,
  .advanced-news-ticker-inner .swiper-pause {
    display: none !important;
  }
}
.live-animation-yes .advanced-news-ticker-inner .ticker-live-icon {
  animation: antLive 1.4s infinite ease-in-out;
}
.advanced-news-ticker-inner svg {
  width: 1em;
  height: 1em;
}
.advanced-news-ticker-inner .e-font-icon-svg path {
  fill: currentColor;
}
.advanced-news-ticker-inner .advanced-news-ticker {
  position: static;
  flex: 1;
  height: 100%;
}
.advanced-news-ticker-inner .swiper-wrapper {
  padding-bottom: 0 !important;
}
.advanced-news-ticker-inner .swiper-slide {
  font-size: 15px;
}
.advanced-news-ticker-inner .swiper-slide div {
  height: 97%;
  opacity: 0;
  display: flex;
  align-items: center;
}
.advanced-news-ticker-inner .swiper-slide.swiper-slide-active div {
  opacity: 1;
}
.advanced-news-ticker-inner .post-link {
  color: #212121;
  white-space: nowrap;
  margin-left: 10px;
  text-decoration: none;
  transition: 0.4s;
}
.advanced-news-ticker-inner .post-link:hover {
  color: var(--ant-primary-color, #FF0404);
}
.advanced-news-ticker-inner .ticker-content svg {
  display: flex;
  margin-left: 10px;
  font-size: 12px;
  color: var(--ant-primary-color, #FF0404);
}
.advanced-news-ticker-inner .ticker-title {
  white-space: nowrap;
  height: 100%;
  min-height: 30px;
  color: #FFFFFF;
  background: var(--ant-primary-color, #FF0404);
  padding: 3px 13px 3px 17px;
  display: inline-flex;
  justify-content: center;
  align-items: center;
  gap: 7px;
  font-weight: bold;
  font-size: 14px;
  text-transform: uppercase;
}
.advanced-news-ticker-inner .ticker-title > * {
  display: inline-flex;
}
.advanced-news-ticker-inner .ticker-title svg {
  font-size: 1.1em;
}
@media (max-width: 579px) {
  .advanced-news-ticker-inner .ticker-title {
    position: absolute;
    height: 36px;
    bottom: 99%;
    right: -1px;
    border-radius: 10px 10px 0 0;
    z-index: -1;
  }
}
.advanced-news-ticker-inner .navigation {
  position: absolute;
  top: 0;
  left: 9px;
  gap: 3px;
  height: 100%;
  z-index: 10;
  display: flex;
  justify-content: center;
  align-items: center;
}
.advanced-news-ticker-inner .navigation .news-ticker-nav {
  position: static;
  margin: 0;
  padding: 0;
  background: #e9eaef;
  color: #4c4949;
  width: 30px;
  height: 28px;
  transition: 0.4s;
  font-size: 11px;
  border-radius: 5px;
  cursor: pointer;
  display: inline-flex;
  justify-content: center;
  align-items: center;
}
.advanced-news-ticker-inner .navigation .news-ticker-nav:hover {
  background: var(--ant-primary-color, #FF0404);
  color: #FFF;
}
.advanced-news-ticker-inner .navigation .news-ticker-nav:before, .advanced-news-ticker-inner .navigation .news-ticker-nav:after {
  content: none !important;
}
.advanced-news-ticker-inner .navigation .swiper-pause {
  cursor: pointer;
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 5px;
}
.advanced-news-ticker-inner .navigation .swiper-pause .pause-icon {
  display: flex;
}
.advanced-news-ticker-inner .navigation .swiper-pause .play-icon {
  display: none;
}
.advanced-news-ticker-inner .navigation .swiper-pause.pause-enable .pause-icon {
  display: none;
}
.advanced-news-ticker-inner .navigation .swiper-pause.pause-enable .play-icon {
  display: flex;
}
.advanced-news-ticker-inner .navigation .swiper-pause span {
  display: inline-flex;
}

.advanced-news-ticker-marquee {
  padding-left: 15px;
  display: flex;
}
.advanced-news-ticker-marquee .news-scroll {
  display: flex;
  align-items: center;
}
.advanced-news-ticker-marquee .marquee-inner {
  display: flex;
  align-items: center;
}
.advanced-news-ticker-marquee .marquee-inner .post-link {
  display: inline-flex;
  justify-content: center;
  align-items: center;
}
.advanced-news-ticker-marquee .marquee-inner .ticker-content svg {
  margin-top: -2px;
}

.animation-type .post-link {
  width: 0;
  display: inline-block;
  overflow: hidden;
  transition: width var(--transitionDuration, 3000ms) steps(150, end);
}
.animation-type .swiper-slide-active .post-link {
  width: 100% !important;
}
@keyframes antLive {
  0%, 80%, 100% {
    transform: scale(0.8);
    -webkit-transform: scale(0.8);
  }
  40% {
    transform: scale(1);
    -webkit-transform: scale(1);
  }
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/